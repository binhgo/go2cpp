// SPDX-License-Identifier: Apache-2.0

package main

import (
	"os"
	"path/filepath"
	"text/template"
)

func writeInstCS(dir string, namespace string, importFuncs, funcs []*Func, exports []*Export, globals []*Global, types []*Type, tables [][]uint32) error {
	f, err := os.Create(filepath.Join(dir, "Inst.cs"))
	if err != nil {
		return err
	}
	defer f.Close()

	if err := instTmpl.Execute(f, struct {
		Namespace   string
		ImportFuncs []*Func
		Funcs       []*Func
		Exports     []*Export
		Globals     []*Global
		Types       []*Type
		Tables      [][]uint32
	}{
		Namespace:   namespace,
		ImportFuncs: importFuncs,
		Funcs:       funcs,
		Exports:     exports,
		Globals:     globals,
		Types:       types,
		Tables:      tables,
	}); err != nil {
		return err
	}
	return nil
}

var instTmpl = template.Must(template.New("Inst.cs").Parse(`// Code generated by go2dotnet. DO NOT EDIT.

#pragma warning disable 162 // unreachable code
#pragma warning disable 164 // label
#pragma warning disable 219 // unused local variables

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace {{.Namespace}}
{
    sealed class Inst
    {
        public Inst(Mem mem, IImport import)
        {
             initializeFuncs_();
             mem_ = mem;
             import_ = import;
        }

{{range $value := .Exports}}{{$value.CSharp "        "}}
{{end}}
{{range $value := .Funcs}}{{$value.CSharp "        " false true}}
{{end}}
{{range $value := .Types}}{{$value.CSharp "        "}}
{{end}}        private static readonly uint[][] table_ = {
{{range $value := .Tables}}            new uint[] { {{- range $value2 := $value}}{{$value2}}, {{end}}},
{{end}}        };

        private void initializeFuncs_()
        {
            funcs_ = new object[] {
{{range $value := .ImportFuncs}}                null,
{{end}}{{range $value := .Funcs}}                (Type{{.Type.Index}})({{.Identifier}}),
{{end}}            };
        }

{{range $value := .Globals}}{{$value.CSharp "        "}}
{{end}}
        private object[] funcs_;
        private Mem mem_;
        private IImport import_;
    }
}
`))
