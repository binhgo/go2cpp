// SPDX-License-Identifier: Apache-2.0

package main

import (
	"os"
	"path/filepath"
	"text/template"
)

func writeBitsCs(dir string, namespace string) error {
	f, err := os.Create(filepath.Join(dir, "Bits.cs"))
	if err != nil {
		return err
	}
	defer f.Close()

	if err := bitsTmpl.Execute(f, struct {
		Namespace   string
	}{
		Namespace:   namespace,
	}); err != nil {
		return err
	}
	return nil
}

var bitsTmpl = template.Must(template.New("Bits.cs").Parse(`// Code generated by go2dotnet. DO NOT EDIT.

namespace {{.Namespace}}
{
    // The implementation is copied from the Go standard package math/bits, which is under BSD-style license.
    static class Bits
    {
        public static int LeadingZeros(uint x)
        {
            return 32 - Len(x);
        }

        public static int LeadingZeros(ulong x)
        {
            return 64 - Len(x);
        }

        public static int TailingZeros(uint x)
        {
            if (x == 0)
            {
                return 32;
            }
            return (int)deBruijn32tab[(x&-x)*deBruijn32>>(32-5)];
        }

        public static int TailingZeros(ulong x)
        {
            if (x == 0)
            {
                return 64;
            }
            return (int)deBruijn64tab[(x&(ulong)(-(long)x))*deBruijn64>>(64-6)];
        }

        public static int OnesCount(uint x)
        {
            return (int)(pop8tab[x>>24] + pop8tab[x>>16&0xff] + pop8tab[x>>8&0xff] + pop8tab[x&0xff]);
        }

        public static int OnesCount(ulong x)
        {
            const ulong m0 = 0x5555555555555555ul;
            const ulong m1 = 0x3333333333333333ul;
            const ulong m2 = 0x0f0f0f0f0f0f0f0ful;
            const ulong m  = 0xfffffffffffffffful;

            x = ((x>>1)&(m0&m)) + (x&(m0&m));
            x = ((x>>2)&(m1&m)) + (x&(m1&m));
            x = ((x>>4) + x) & (m2 & m);
            x += x >> 8;
            x += x >> 16;
            x += x >> 32;
            return (int)(x) & ((1<<7) - 1);
        }

        public static uint RotateLeft(uint x, int k)
        {
            const int n = 32;
            int s = k & (n - 1);
            return x<<s | x>>(n-s);
        }

        public static ulong RotateLeft(ulong x, int k)
        {
            const int n = 64;
            int s = k & (n - 1);
            return x<<s | x>>(n-s);
        }

        private static int Len(uint x)
        {
            int n = 0;
            if (x >= 1<<16)
            {
                x >>= 16;
                n = 16;
            }
            if (x >= 1<<8)
            {
                x >>= 8;
                n += 8;
            }
            return n + (int)len8tab[x];
        }

        private static int Len(ulong x)
        {
            int n = 0;
            if (x >= 1ul<<32)
            {
                x >>= 32;
                n = 32;
            }
            if (x >= 1ul<<16)
            {
                x >>= 16;
                n += 16;
            }
            if (x >= 1ul<<8)
            {
                x >>= 8;
                n += 8;
            }
            return n + (int)len8tab[x];
        }

        static byte[] pop8tab = new byte[] {
            0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
        };

        static byte[] len8tab = new byte[] {
            0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
            0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
            0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
            0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
            0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
            0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        };

        const uint deBruijn32 = 0x077CB531;

        static byte[] deBruijn32tab = new byte[] {
            0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
            31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
        };

        const ulong deBruijn64 = 0x03f79d71b4ca8b09;

        static byte[] deBruijn64tab = new byte[] {
            0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
            62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
            63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
            54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
        };
    }
}
`))
