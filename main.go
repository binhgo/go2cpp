// SPDX-License-Identifier: Apache-2.0

package main

import (
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/akupila/go-wasm"
	"golang.org/x/tools/go/packages"
)

func main() {
	if err := run(); err != nil {
		panic(err)
	}
}

func identifierFromString(str string) string {
	str = strings.ReplaceAll(str, ".", "_")
	str = strings.ReplaceAll(str, "-", "_")
	for strings.Contains(str, "__") {
		str = strings.ReplaceAll(str, "__", "_")
	}
	return str
}

func namespaceFromPkg(pkg *packages.Package) string {
	ts := strings.Split(pkg.PkgPath, "/")
	for i, t := range ts {
		ts[i] = identifierFromString(t)
	}
	return strings.Join(ts, ".")
}

type Func struct {
	Name string
}

func run() error {
	tmp, err := ioutil.TempDir("", "go2dotnet")
	if err != nil {
		return err
	}
	defer os.RemoveAll(tmp)

	wasmpath := filepath.Join(tmp, "tmp.wasm")

	// TODO: Detect the last argument is path or not
	pkgname := os.Args[len(os.Args)-1]

	args := append([]string{"build"}, os.Args[1:]...)
	args = append(args[:len(args)-1], "-o", wasmpath, pkgname)
	cmd := exec.Command("go", args...)
	cmd.Stderr = os.Stderr
	cmd.Env = append(os.Environ(), "GOOS=js", "GOARCH=wasm")
	if err := cmd.Run(); err != nil {
		return err
	}

	f, err := os.Open(wasmpath)
	if err != nil {
		return err
	}
	defer f.Close()

	mod, err := wasm.Parse(f)
	if err != nil {
		return err
	}

	var fs []*Func
	for _, s := range mod.Sections {
		switch s := s.(type) {
		case *wasm.SectionName:
			for _, f := range s.Functions.Names {
				fs = append(fs, &Func{
					Name: identifierFromString(f.Name),
				})
			}
		}
	}

	pkgs, err := packages.Load(nil, pkgname)
	if err != nil {
		return err
	}

	namespace := namespaceFromPkg(pkgs[0])
	class := identifierFromString(pkgs[0].Name)

	t := template.Must(template.New("out.cs").Parse(tmpl))
	if err := t.Execute(os.Stdout, struct {
		Namespace string
		Class     string
		Funcs     []*Func
	}{
		Namespace: namespace,
		Class:     class,
		Funcs:     fs,
	}); err != nil {
		return err
	}

	return nil
}

const tmpl = `// Code generated by go2dotnet. DO NOT EDIT.

namespace {{.Namespace}}
{
    class {{.Class}}
    {
{{range $value := .Funcs}}        private void {{$value.Name}}()
        {
            // TODO: Implement this.
        }

{{end}}
    }
}
`
